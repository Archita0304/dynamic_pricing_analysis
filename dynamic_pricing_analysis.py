# -*- coding: utf-8 -*-
"""dynamic_pricing_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u84x5Tl5SZLiPXFXMALu_-7vL2v16a8K

# Load and Clean the Data
"""

import pandas as pd

# Load data
df = pd.read_csv("/content/Amazon Sale Report.csv")
df = df[df['Status'].str.contains('Shipped', na=False)]
df = df[(df['Qty'] > 0) & (df['Amount'] > 0)]
df = df.dropna(subset=['Amount', 'Qty', 'SKU'])
df.head()

"""# Group Data by SKU and Price"""

df_grouped = df.groupby(['SKU', 'Amount']).agg({'Qty': 'sum'}).reset_index()
df_grouped.rename(columns={'Amount': 'Price', 'Qty': 'Units_Sold'}, inplace=True)

# Remove outliers
Q1 = df_grouped['Price'].quantile(0.25)
Q3 = df_grouped['Price'].quantile(0.75)
IQR = Q3 - Q1
df_grouped = df_grouped[(df_grouped['Price'] >= Q1 - 1.5 * IQR) &
                        (df_grouped['Price'] <= Q3 + 1.5 * IQR)]

df_grouped.head()

from matplotlib import pyplot as plt
plt.figure(figsize=(10,5))

plt.subplot(1,3,1)
df_grouped['Price'].plot(kind='hist', bins=20, title='Price')
plt.gca().spines[['top', 'right',]].set_visible(False)


plt.subplot(1,2,2)
df_grouped['log_price'].plot(kind='hist', bins=20, title='log_price')
plt.gca().spines[['top', 'right',]].set_visible(False)

"""# Estimate Price Elasticity Using Log-Log Regression"""

import numpy as np
import statsmodels.api as sm

# Log-transform
df_grouped['log_price'] = np.log(df_grouped['Price'])
df_grouped['log_qty'] = np.log(df_grouped['Units_Sold'])

# Regression
X = sm.add_constant(df_grouped['log_price'])
y = df_grouped['log_qty']
model = sm.OLS(y, X).fit()

# Elasticity = coefficient of log_price
elasticity = model.params['log_price']
print(f"Price Elasticity Estimate: {elasticity:.2f}")
print(model.summary())

"""# Simulate Profit Impact"""

# Assume cost = 60% of average price
avg_price = df_grouped['Price'].mean()
avg_cost = avg_price * 0.6

def simulate_profit(price_change_pct):
    new_price = avg_price * (1 + price_change_pct)
    demand_multiplier = (new_price / avg_price) ** elasticity
    new_units = df_grouped['Units_Sold'].mean() * demand_multiplier
    revenue = new_price * new_units
    cost = avg_cost * new_units
    profit = revenue - cost
    return new_price, new_units, revenue, profit

# Simulate for -10%, 0%, +10% price changes
for pct in [-0.1, 0, 0.1]:
    p, q, r, pr = simulate_profit(pct)
    print(f"Price {pct*100:+.0f}% → ₹{p:.2f}, Units: {q:.0f}, Revenue: ₹{r:.2f}, Profit: ₹{pr:.2f}")

"""# Plot Elasticity Curve"""

import matplotlib.pyplot as plt

# Plot log-log demand curve
plt.figure(figsize=(8, 5))
plt.scatter(df_grouped['log_price'], df_grouped['log_qty'], color='steelblue', label='Data')
plt.plot(df_grouped['log_price'], model.predict(X), color='red', label='Fitted Line')
plt.title("Log-Log Regression for Price Elasticity")
plt.xlabel("log(Price)")
plt.ylabel("log(Units Sold)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""# Segmentation by Category"""

for category in df['Category'].unique():
    sub = df[df['Category'] == category].copy()  # Important: use .copy() here to avoid view vs copy issues
    sub.loc[:, 'log_price'] = np.log(sub['Amount'])
    sub.loc[:, 'log_qty'] = np.log(sub['Qty'])

    if sub['log_price'].isnull().any() or sub['log_qty'].isnull().any():
        continue  # skip if log transformation failed

    model = smf.ols('log_qty ~ log_price', data=sub).fit()
    elasticity = model.params['log_price']
    print(f"Category: {category} → Elasticity: {elasticity:.2f}")